{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30823,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install d2l","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:15:40.424869Z","iopub.execute_input":"2025-01-08T19:15:40.425233Z","iopub.status.idle":"2025-01-08T19:16:41.010841Z","shell.execute_reply.started":"2025-01-08T19:15:40.425190Z","shell.execute_reply":"2025-01-08T19:16:41.009318Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%matplotlib inline\nimport pandas as pd\nimport torch\nfrom torch import nn\nfrom d2l import torch as d2l","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:16:41.012430Z","iopub.execute_input":"2025-01-08T19:16:41.012754Z","iopub.status.idle":"2025-01-08T19:16:48.355666Z","shell.execute_reply.started":"2025-01-08T19:16:41.012716Z","shell.execute_reply":"2025-01-08T19:16:48.354501Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Downloading Data","metadata":{}},{"cell_type":"code","source":"class KaggleHouse(d2l.DataModule):\n    def __init__(self, batch_size, train=None, val=None):\n        super().__init__()\n        self.save_hyperparameters()\n        if self.train is None:\n            self.raw_train = pd.read_csv(d2l.download(\n                d2l.DATA_URL + 'kaggle_house_pred_train.csv', self.root,\n                sha1_hash='585e9cc93e70b39160e7921475f9bcd7d31219ce'))\n            self.raw_val = pd.read_csv(d2l.download(\n                d2l.DATA_URL + 'kaggle_house_pred_test.csv', self.root,\n                sha1_hash='fa19780a7b011d9b009e8bff8e99922a8ee2eb90'))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:16:48.358634Z","iopub.execute_input":"2025-01-08T19:16:48.359136Z","iopub.status.idle":"2025-01-08T19:16:48.367036Z","shell.execute_reply.started":"2025-01-08T19:16:48.359104Z","shell.execute_reply":"2025-01-08T19:16:48.365659Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Accessing and Reading the Dataset","metadata":{}},{"cell_type":"code","source":"data = KaggleHouse(batch_size=64)\nprint(data.raw_train.shape)\nprint(data.raw_val.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:16:48.369154Z","iopub.execute_input":"2025-01-08T19:16:48.369662Z","iopub.status.idle":"2025-01-08T19:16:49.421996Z","shell.execute_reply.started":"2025-01-08T19:16:48.369626Z","shell.execute_reply":"2025-01-08T19:16:49.420553Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Data Preprocessing","metadata":{}},{"cell_type":"code","source":"print(data.raw_train.iloc[:4, [0, 1, 2, 3, -3, -2, -1]])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:15:32.274770Z","iopub.status.idle":"2025-01-08T19:15:32.275127Z","shell.execute_reply":"2025-01-08T19:15:32.274987Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"@d2l.add_to_class(KaggleHouse)\ndef preprocess(self):\n    # Remove the ID and label columns\n    label = 'SalePrice'\n    features = pd.concat(\n        (self.raw_train.drop(columns=['Id', label]),\n         self.raw_val.drop(columns=['Id'])))\n    # Standardize numerical columns\n    numeric_features = features.dtypes[features.dtypes!='object'].index\n    features[numeric_features] = features[numeric_features].apply(\n        lambda x: (x - x.mean()) / (x.std()))\n    # Replace NAN numerical features by 0\n    features[numeric_features] = features[numeric_features].fillna(0)\n    # Replace discrete features by one-hot encoding\n    features = pd.get_dummies(features, dummy_na=True)\n    # Save preprocessed features\n    self.train = features[:self.raw_train.shape[0]].copy()\n    self.train[label] = self.raw_train[label]\n    self.val = features[self.raw_train.shape[0]:].copy()\n, [0, 1, 2, 3, -3, -2, -1]])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:16:49.422921Z","iopub.execute_input":"2025-01-08T19:16:49.423190Z","iopub.status.idle":"2025-01-08T19:16:49.436998Z","shell.execute_reply.started":"2025-01-08T19:16:49.423167Z","shell.execute_reply":"2025-01-08T19:16:49.435666Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.preprocess()\ndata.train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:16:49.438128Z","iopub.execute_input":"2025-01-08T19:16:49.438489Z","iopub.status.idle":"2025-01-08T19:16:49.568057Z","shell.execute_reply.started":"2025-01-08T19:16:49.438460Z","shell.execute_reply":"2025-01-08T19:16:49.567033Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Error Measure","metadata":{}},{"cell_type":"code","source":"@d2l.add_to_class(KaggleHouse)\ndef get_dataloader(self, train):\n    label = 'SalePrice'\n    data = self.train if train else self.val\n    if label not in data: return\n    get_tensor = lambda x: torch.tensor(x.values.astype(float),\n                                      dtype=torch.float32)\n    # Logarithm of prices\n    tensors = (get_tensor(data.drop(columns=[label])),  # X\n               torch.log(get_tensor(data[label])).reshape((-1, 1)))  # Y\n    return self.get_tensorloader(tensors, train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:16:49.569271Z","iopub.execute_input":"2025-01-08T19:16:49.569607Z","iopub.status.idle":"2025-01-08T19:16:49.575608Z","shell.execute_reply.started":"2025-01-08T19:16:49.569576Z","shell.execute_reply":"2025-01-08T19:16:49.574594Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## K-Fold Cross-Validation","metadata":{}},{"cell_type":"code","source":"def k_fold_data(data, k):\n    rets = []\n    fold_size = data.train.shape[0] // k\n    for j in range(k):\n        idx = range(j * fold_size, (j+1) * fold_size)\n        rets.append(KaggleHouse(data.batch_size, data.train.drop(index=idx),\n                                data.train.loc[idx]))\n    return rets","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:17:07.617667Z","iopub.execute_input":"2025-01-08T19:17:07.618007Z","iopub.status.idle":"2025-01-08T19:17:07.623954Z","shell.execute_reply.started":"2025-01-08T19:17:07.617980Z","shell.execute_reply":"2025-01-08T19:17:07.622248Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def k_fold(trainer, data, k, lr):\n    val_loss, models = [], []\n    for i, data_fold in enumerate(k_fold_data(data, k)):\n        model = d2l.LinearRegression(lr)\n        model.board.yscale='log'\n        if i != 0: model.board.display = False\n        trainer.fit(model, data_fold)\n        val_loss.append(float(model.board.data['val_loss'][-1].y))\n        models.append(model)\n    print(f'average validation log mse = {sum(val_loss)/len(val_loss)}')\n    return models","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:17:09.976598Z","iopub.execute_input":"2025-01-08T19:17:09.976980Z","iopub.status.idle":"2025-01-08T19:17:09.984348Z","shell.execute_reply.started":"2025-01-08T19:17:09.976951Z","shell.execute_reply":"2025-01-08T19:17:09.982771Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Model Selection","metadata":{}},{"cell_type":"code","source":"trainer = d2l.Trainer(max_epochs=10)\nmodels = k_fold(trainer, data, k=5, lr=0.01)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:17:11.409461Z","iopub.execute_input":"2025-01-08T19:17:11.409877Z","iopub.status.idle":"2025-01-08T19:17:25.633555Z","shell.execute_reply.started":"2025-01-08T19:17:11.409845Z","shell.execute_reply":"2025-01-08T19:17:25.632274Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Submitting Predictions","metadata":{}},{"cell_type":"code","source":"preds = [model(torch.tensor(data.val.values.astype(float), dtype=torch.float32))\n         for model in models]\n# Taking exponentiation of predictions in the logarithm scale\nensemble_preds = torch.exp(torch.cat(preds, 1)).mean(1)\nsubmission = pd.DataFrame({'Id':data.raw_val.Id,\n                           'SalePrice':ensemble_preds.detach().numpy()})\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:18:18.730118Z","iopub.execute_input":"2025-01-08T19:18:18.730626Z","iopub.status.idle":"2025-01-08T19:18:18.904698Z","shell.execute_reply.started":"2025-01-08T19:18:18.730587Z","shell.execute_reply":"2025-01-08T19:18:18.903617Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Exercises","metadata":{}},{"cell_type":"markdown","source":"Submit your predictions for this section to Kaggle. How good are they?\n\nScore: 0.40539\n4870/5402* ","metadata":{}},{"cell_type":"markdown","source":"Is it always a good idea to replace missing values by a mean? Hint: can you construct a situation where the values are not missing at random?","metadata":{}},{"cell_type":"code","source":"data = KaggleHouse(batch_size=64)\nprint(data.raw_train.shape)\nprint(data.raw_val.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:32:39.710057Z","iopub.execute_input":"2025-01-08T19:32:39.710443Z","iopub.status.idle":"2025-01-08T19:32:39.760450Z","shell.execute_reply.started":"2025-01-08T19:32:39.710413Z","shell.execute_reply":"2025-01-08T19:32:39.759452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"@d2l.add_to_class(KaggleHouse)\ndef preprocess(self):\n    # Remove the ID and label columns\n    label = 'SalePrice'\n    features = pd.concat(\n        (self.raw_train.drop(columns=['Id', label]),\n         self.raw_val.drop(columns=['Id'])))\n    # Standardize numerical columns\n    numeric_features = features.dtypes[features.dtypes!='object'].index\n    features[numeric_features] = features[numeric_features].apply(\n        lambda x: (x - x.mean()) / (x.std()))\n    # Replace NAN numerical features by mean\n    mean_value = features[numeric_features].mean()\n    features[numeric_features] = features[numeric_features].fillna(mean_value)\n    # Replace discrete features by one-hot encoding\n    features = pd.get_dummies(features, dummy_na=True)\n    # Save preprocessed features\n    self.train = features[:self.raw_train.shape[0]].copy()\n    self.train[label] = self.raw_train[label]\n    self.val = features[self.raw_train.shape[0]:].copy()\n, [0, 1, 2, 3, -3, -2, -1]])\n\ndata.preprocess()\ndata.train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:32:40.880598Z","iopub.execute_input":"2025-01-08T19:32:40.880947Z","iopub.status.idle":"2025-01-08T19:32:41.017551Z","shell.execute_reply.started":"2025-01-08T19:32:40.880918Z","shell.execute_reply":"2025-01-08T19:32:41.016262Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"trainer = d2l.Trainer(max_epochs=17)\nmodels = k_fold(trainer, data, k=5, lr=0.01)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:36:59.496600Z","iopub.execute_input":"2025-01-08T19:36:59.497005Z","iopub.status.idle":"2025-01-08T19:37:20.832485Z","shell.execute_reply.started":"2025-01-08T19:36:59.496972Z","shell.execute_reply":"2025-01-08T19:37:20.831222Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"preds = [model(torch.tensor(data.val.values.astype(float), dtype=torch.float32))\n         for model in models]\n# Taking exponentiation of predictions in the logarithm scale\nensemble_preds = torch.exp(torch.cat(preds, 1)).mean(1)\nsubmission = pd.DataFrame({'Id':data.raw_val.Id,\n                           'SalePrice':ensemble_preds.detach().numpy()})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T19:33:48.058913Z","iopub.execute_input":"2025-01-08T19:33:48.059245Z","iopub.status.idle":"2025-01-08T19:33:48.238759Z","shell.execute_reply.started":"2025-01-08T19:33:48.059218Z","shell.execute_reply":"2025-01-08T19:33:48.237686Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now Score: 0.35884 and 4814/5402","metadata":{}}]}